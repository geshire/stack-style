@import "../config";
@import "../sizes";

// text base
body {
  color: $body-color;
  font-family: $body-font-family;
  font-weight: $body-font-weight;
  font-size: $body-font-size;
  line-height: $body-line-height;
}

@each $color in $typography-colors {
  .color-#{map-get($color, name)} {
    color: map-get($color, color) !important;
  }
}

@mixin text($text-item) {
  font-size: map-get($text-item, font-size);
  font-weight: $body-font-weight;
  line-height: map-get($text-item, line-height);
  &.weight-light,
  .weight-light {
    font-weight: map-get($text-item, light-weight);
  }
  &.weight-semi,
  .weight-semi {
    font-weight: map-get($text-item, semi-weight);
  }
  &.weight-bold,
  .weight-bold {
    font-weight: map-get($text-item, bold-weight);
  }
  &.line-tight,
  .line-tight {
    line-height: map-get($text-item, line-tight);
  }
}

@mixin header($header-item) {
  color: map-get($header-item, default-color);
  font-family: map-get($header-item, font-family);
  font-size: map-get($header-item, font-size);
  font-weight: map-get($header-item, default-weight);
  line-height: map-get($header-item, line-height);
  &.weight-light,
  .weight-light {
    font-weight: map-get($header-item, light-weight);
  }
  &.weight-semi,
  .weight-semi {
    font-weight: map-get($header-item, semi-weight);
  }
  &.weight-bold,
  .weight-bold {
    font-weight: map-get($header-item, bold-weight);
  }
}


@each $media-size in $media-screen-size-keys {
  @media #{map-get($media-screen-sizes, $media-size)} {
    @for $i from 1 through length($text) {
      .#{$media-size}text-#{$i} {
        @include text(nth($text, $i));
      }
    }
    @for $i from 1 through length($headers) {
      .#{$media-size}head-#{$i} {
        @include header(nth($headers, $i));
      }
    }
  }
}
